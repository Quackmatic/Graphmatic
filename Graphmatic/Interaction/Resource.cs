using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Graphmatic.Interaction
{
    /// <summary>
    /// Represents a resource in a Graphmatic document.
    /// </summary>
    public class Resource : IXmlConvertible
    {
        /// <summary>
        /// Gets or sets the name of the resource in the document.
        /// </summary>
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the description of the resource.
        /// </summary>
        public string Description
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the name of the author of the resource.
        /// </summary>
        public string Author
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the date of creation of the resource.
        /// </summary>
        public DateTime CreationDate
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the uniquely-identifying GUID of the resource.
        /// </summary>
        public Guid Guid
        {
            get;
            protected set;
        }

        /// <summary>
        /// Gets or sets whether this resource is hidden in the document resource view.
        /// </summary>
        public bool Hidden
        {
            get;
            set;
        }

        /// <summary>
        /// Gets the string describing the type of the resource in the document.
        /// </summary>
        public virtual string Type
        {
            get
            {
                return "Resource";
            }
        }

        /// <summary>
        /// Gets or sets whether this resource has been removed from its parent document.<para/>
        /// This is used for resolving resource references to resources that have been removed from
        /// the document but not from memory.
        /// </summary>
        public bool Removed
        {
            get;
            set;
        }

        /// <summary>
        /// Initialize a new empty instance of the <c>Resource</c> class with a default name, and initialize the attributes identifying
        /// this resource in the file.
        /// </summary>
        public Resource()
        {
            Removed = false;
            InitializeIdentifyingAttributes();
            Name = "New " + Type;
        }

        /// <summary>
        /// Initializes the attributes that uniquely identify this Resource.
        /// <para/>
        /// This includes:
        /// <list type="bullet">
        ///     <item>
        ///         <term>Author</term>
        ///         <description>Given the value stored in the Username application setting.</description>
        ///     </item>
        ///     <item>
        ///         <term>CreationDate</term>
        ///         <description>Given the value returned by <c>DateTime.Now</c>.</description>
        ///     </item>
        ///     <item>
        ///         <term>Guid</term>
        ///         <description>Given a unique Guid generated by <c>Guid.NewGuid()</c>.</description>
        ///     </item>
        /// </list>
        /// </summary>
        public void InitializeIdentifyingAttributes()
        {
            Author = Properties.Settings.Default.Username;
            CreationDate = DateTime.Now;
            Guid = Guid.NewGuid();
        }

        /// <summary>
        /// Initialize a new empty instance of the <c>Graphmatic.Interaction.Resource</c> class from serialized XML data.
        /// </summary>
        /// <param name="xml">The XML data to use for deserializing this Resource.</param>
        public Resource(XElement xml)
        {
            Removed = false;
            Name = xml.Attribute("Name").Value;
            Author = xml.Attribute("Author").Value;
            CreationDate = DateTime.Parse(xml.Attribute("CreationDate").Value);
            Description = xml.Element("Description").Value;
            Guid = Guid.Parse(xml.Attribute("ID").Value);
            Hidden = xml.Attribute("Hidden") != null ?
                Boolean.Parse(xml.Attribute("Hidden").Value) :
                false;
        }

        /// <summary>
        /// Gets the resource icon describing this resource type in the user interface.<para/>
        /// This will return different icons if overriden by a derived type.
        /// </summary>
        /// <param name="large">Whether to return the large icon or not. Large icons are 32*32 and
        /// small icons are 16*16.</param>
        public virtual Image GetResourceIcon(bool large)
        {
            return large ?
                Properties.Resources.Data32 :
                Properties.Resources.Data16;
        }

        /// <summary>
        /// Converts this object to its equivalent serialized XML representation.
        /// </summary>
        /// <returns>The serialized representation of this Graphmatic object.</returns>
        public virtual XElement ToXml()
        {
            return new XElement("Resource",
                new XAttribute("Name", Name),
                new XAttribute("Author", Author),
                new XAttribute("CreationDate", CreationDate),
                new XAttribute("ID", Guid),
                new XAttribute("Hidden", Hidden),
                new XElement("Description", Description));
        }

        /// <summary>
        /// Converts this <c>Graphmatic.Interaction.Resource</c> into an XML element describing a reference
        /// to this resource from elsewhere in the document. See <c>Graphmatic.Interaction.Resource.UpdateReferences()</c>'s
        /// documentation for an explanation of this system.
        /// </summary>
        public XElement ToResourceReference()
        {
            return new XElement("Reference",
                new XAttribute("ID", Guid));
        }

        /// <summary>
        /// Converts this Resource to an appropriate string representation.<para/>
        /// In most cases, this just returns the Resource name.
        /// </summary>
        /// <returns>The name of this Resource.</returns>
        public override string ToString()
        {
            return Name;
        }

        /// <summary>
        /// Updates any references to other resources in the document to point to the correct resource.<para/>
        /// This method (and related method <c>Graphmatic.Interaction.Resource.ToResourceReference()</c>) are
        /// needed because certain resources, such as the Page resource, can refer to other resources from within
        /// them (for example if a Page contains a plotted DataSet). However, if the Page is deserialized before
        /// the DataSet, then it will not have an object to refer to. Thus, the resource reference system is used,
        /// whereby certain objects (such as the Page) keep track of which resources they need to refer to later on,
        /// and only actually dereference the Resource references (via the resource's GUID) after all resources in
        /// the document have been deserialized.
        /// </summary>
        /// <param name="document">The parent document containing this resource, and any other resources that this
        /// resource may point to.</param>
        public virtual void UpdateReferences(Document document)
        {

        }

        /// <summary>
        /// Called when another resource in the Document containing this resource is modified.
        /// This is used so certain objects which refer to other Resources can update themselves accordingly, for
        /// example by redrawing themselves.
        /// </summary>
        /// <param name="resource">The other resource which was modified.</param>
        /// <param name="type">The type of resource modification which took place.</param>
        public virtual void ResourceModified(Resource resource, ResourceModifyType type)
        {

        }
    }
}
